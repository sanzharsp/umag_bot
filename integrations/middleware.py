from aiogram import BaseMiddleware
from aiogram.types import Message
import requests
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")


class CounterMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.counter = 0

    async def SendAmoCrm(self, object_data: object) -> None:
        requests.post(
            f'https://amojo.amocrm.ru/~external/hooks/telegram?t={TOKEN}',
            json=object_data)

    async def __call__(
            self,
            handler,
            event: Message,
            data,
    ):
        # event_data = event.model_dump_json(indent=2)
        # print(event_data)
        # for k, v in data.items():
        #     print(k)
        #     print(k, v)
        # print("event -------------------------------------------------------")
        #
        print(event)
        #
        # print("handler -------------------------------------------------------")
        #
        # print(handler)
        #
        # print("-------------------------------------------------------")
        #
        # print(data['raw_state'] == 'ConsultationForm:name')
        # print(event.update_id)
        # print(event.message.message_id)
        # print(event.message.date)
        # print(event.message.chat.id)
        # print(event.message.chat.type)
        # print(event.message.chat.username)
        # print(event.message.chat.first_name)
        if event.message is not None:
            await self.handle_message(data, event)
        if event.callback_query is not None:
            await self.handle_callback_query(data, event)

        return await handler(event, data)


    async def handle_callback_query(self, data, event):
        message = event.callback_query.message
        text = f'{translations[data["raw_state"]]}{button_translations[event.callback_query.data]}'

        object_data = {
            'update_id': event.update_id,
            'message': {
                'message_id': message.message_id,
                'from': {
                    'id': message.chat.id,
                    'is_bot': data['event_from_user'].is_bot,
                    'first_name': data['event_from_user'].first_name,
                    'username': data['event_from_user'].username,
                    'language_code': data['event_from_user'].language_code
                },
                'chat': {
                    'id': message.chat.id,
                    'first_name': message.chat.first_name,
                    'username': message.chat.username,
                    'type': message.chat.type
                },
                'date': int(message.date.timestamp()),
                'text': text,
            }
        }

        await self.SendAmoCrm(object_data)

    async def handle_message(self, data, event):
        message = event.message
        print(message)
        text = f'{translations[data["raw_state"]]}{message.text}'
        # if data["raw_state"] == "BugForm:additional_information":
        if (message.text is not None):
            text = f'{translations[data["raw_state"]]}{message.text}'

        elif (message.photo is not None):
            telegram_file_id = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/getFile?file_id={message.photo[-1].file_id}'
            file_path = requests.get(telegram_file_id).json()
            text = f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ\n'
            text += f'https://api.telegram.org/file/bot{os.getenv("BOT_TOKEN")}/{file_path["result"]["file_path"]}'

        elif (message.video is not None):
            telegram_file_id = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/getFile?file_id={message.video.file_id}'
            file_path = requests.get(telegram_file_id).json()
            text = f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ\n'
            text += f'https://api.telegram.org/file/bot{os.getenv("BOT_TOKEN")}/{file_path["result"]["file_path"]}'

        elif (message.document is not None):
            telegram_file_id = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/getFile?file_id={message.document.file_id}'
            file_path = requests.get(telegram_file_id).json()
            text = f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç\n'
            text += f'https://api.telegram.org/file/bot{os.getenv("BOT_TOKEN")}/{file_path["result"]["file_path"]}'

        elif (message.audio is not None):
            telegram_file_id = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/getFile?file_id={message.audio.file_id}'
            file_path = requests.get(telegram_file_id).json()
            text = f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ\n'
            text += f'https://api.telegram.org/file/bot{os.getenv("BOT_TOKEN")}/{file_path["result"]["file_path"]}'

        elif (message.voice is not None):
            telegram_file_id = f'https://api.telegram.org/bot{os.getenv("BOT_TOKEN")}/getFile?file_id={message.voice.file_id}'
            file_path = requests.get(telegram_file_id).json()
            text = f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
            text += f'https://api.telegram.org/file/bot{os.getenv("BOT_TOKEN")}/{file_path["result"]["file_path"]}'

        if data['raw_state'] == "BugForm:additional_information":
            text = f'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º: {message.chat.id}'

        object_data = {
            'update_id': event.update_id,
            'message': {
                'message_id': message.message_id,
                'from': {
                    'id': message.chat.id,
                    'is_bot': data['event_from_user'].is_bot,
                    'first_name': data['event_from_user'].first_name,
                    'username': data['event_from_user'].username,
                    'language_code': data['event_from_user'].language_code
                },
                'chat': {
                    'id': message.chat.id,
                    'first_name': message.chat.first_name,
                    'username': message.chat.username,
                    'type': message.chat.type
                },
                'date': int(message.date.timestamp()),
                'text': text,

            }
        }
        await self.SendAmoCrm(object_data)


translations = {
    None: "",
    'ConsultationForm:name': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –≤–≤–µ–ª –∏–º—è: ",
    'ConsultationForm:franchise_name': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'ConsultationForm:phone_number': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'ConsultationForm:problem_description': "üñäÔ∏è –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ",

    'BugForm:name': "üö´ –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ –∏ –≤–≤–µ–ª —Å–≤–æ–µ –∏–º—è: ",
    'BugForm:franchise_name': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'BugForm:phone_number': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'BugForm:bug_name': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞: ",
    'BugForm:description_and_scenario': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: ",
    'BugForm:additional_information': "üö´ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ",

    'SynchronizationForm:name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å–∏–Ω—Ö—Ä–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –≤–≤–µ–ª –∏–º—è: ",
    'SynchronizationForm:franchise_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'SynchronizationForm:phone_number': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ",
    'SynchronizationForm:problem_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
    'SynchronizationForm:shop_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –≤–µ—Ä—Å–∏—é –∫–∞—Å—Å—ã: ",
    'SynchronizationForm:cash_register_version': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è –∫–∞—Å—Å–∏—Ä–∞: ",
    'SynchronizationForm:cashier_name': "üîÑ –ö–ª–∏–µ–Ω—Ç –∏–º—è: ",
    'SynchronizationForm:cash_register_password': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞—Å—Å—ã: ",
    'SynchronizationForm:link_to_shop': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: ",
    'SynchronizationForm:link_to_archive': "üîÑ –ö–ª–∏–µ–Ω—Ç –∏–º—è —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ö–∏–≤: ",
    'SynchronizationForm:login': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –õ–æ–≥–∏–Ω: ",
    'SynchronizationForm:password': "üîÑ –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å: ",
    'GetCourseForm:name': "üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∑–∞–ø–∏—Å—å –≤ GetCource –∏ –≤–≤–µ–ª —Å–≤–æ–µ –∏–º—è: ",
    'GetCourseForm:franchise_name': "üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã: ",
    'GetCourseForm:phone_number': "üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
    'GetCourseForm:email': "üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª email: ",
    'GetCourseForm:study_type': "üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –≤–∏–¥ –æ–±—É—á–µ–Ω–∏—è:: ",

}

button_translations = {
    "franchisee": "–§—Ä–∞–Ω—á–∞–π–∑–∏",
    "technical_specialist": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    "sales_manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
    "hr": "HR",
    "support_consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "support_bug": "–ë–∞–≥",
    "support_synchronization": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
    "support_access_flash": "–î–æ—Å—Ç—É–ø –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—É—é —Ñ–ª–µ—à–∫—É",
    "support_knowledge_base": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
    "support_getcource": "–î–æ—Å—Ç—É–ø –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ GetCource",
    "support_document_templates": "–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "support_ideas": "–í–∞—à–∏ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ü–û",
}